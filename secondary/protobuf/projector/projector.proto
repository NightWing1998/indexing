syntax = "proto2";

// system request and administration request supported
// by projector's admin-port.

package protoProjector;

import "common.proto";
import "index.proto";

enum FeedVersion {
    sherlock         = 1;
    watson           = 2;
    cheshireCat      = 3;
}

// Requested by Coordinator/indexer to learn vbuckets
// hosted by kvnodes.
message VbmapRequest {
    required string pool    = 1;
    required string bucket  = 2;
    repeated string kvaddrs = 3; // vbuckets for which failover log is request
}

message VbmapResponse {
    repeated string   kvaddrs = 1;
    repeated Vbuckets kvvbnos = 2;
    optional Error    err     = 3;
}

// Requested by Coordinator during system-start,
// re-connect, rollback
message FailoverLogRequest {
    required string pool   = 1;
    required string bucket = 2;
    repeated uint32 vbnos  = 3; // vbuckets for which failover log is request
}

message FailoverLogResponse {
    repeated FailoverLog logs = 1;
    optional Error       err  = 2;
}

// Requested by Coordinator or indexer to start a
// new mutation topic. Respond back with TopicResponse.
//
// From Cheshite-Cat (v7.0), the requests additionally accepts keyspaceIds
// as input. KeyspaceId will be used to maintain book-keeping at projector
//
// If keyspaceId is not nil, there should be a 1:1 mapping between a bucket
//  and keyspaceId in the request (The bucket name is deduced from reqTimestamps)
// (reqTimestamps[i].Bucket maps to keyspaceIds[i])
message MutationTopicRequest {
    required string   topic         = 1;
    required string   endpointType  = 2; // settings to RouterEndpointFactory
    repeated TsVbuuid reqTimestamps = 3; // list of timestamps, per bucket
    // initial list of instances applicable for this topic
    repeated Instance    instances       = 4;
    optional FeedVersion version         = 5 [default=sherlock];
    optional bool        async           = 6;
    optional uint64      opaque2         = 7;
    repeated string      keyspaceIds     = 8;
    optional bool        collectionAware = 9;
    optional bool        osoSnapshot     = 10;
    optional bool        needsAuth       = 11;
    optional uint32      numVbWorkers    = 12;
    optional uint32      numDcpConns     = 13;
}

// Response back for
// MutationTopicRequest, RestartVbucketsRequest, AddBucketsRequest
message TopicResponse {
    optional string   topic              = 1;
    repeated uint64   instanceIds        = 2;
    repeated TsVbuuid activeTimestamps   = 3; // original requested timestamp
    repeated TsVbuuid rollbackTimestamps = 4; // sort order
    optional Error    err                = 5;
    repeated TsVbuuid pendingTimestamps  = 6; // requested timestamp yet being active
    repeated string   keyspaceIds        = 7;
}

// Response back for
// AddInstancesRequest
message TimestampResponse {
    required string   topic             = 1;
    repeated TsVbuuid currentTimestamps = 2;
    optional Error    err               = 3;
    repeated string   keyspaceIds       = 4;
}

// RestartVbucketsRequest will restart a subset
// of vbuckets for each specified buckets.
// Respond back with TopicResponse
message RestartVbucketsRequest {
    required string   topic              = 1;
    repeated TsVbuuid restartTimestamps  = 2; // per bucket timestamps
    optional uint64   opaque2            = 3;
    repeated string   keyspaceIds        = 4;
    optional bool     needsAuth          = 5;
}

// ShutdownVbucketsRequest will shutdown a subset of vbuckets
// for each specified buckets. Respond back with TopicResponse
message ShutdownVbucketsRequest {
    required string   topic              = 1;
    repeated TsVbuuid shutdownTimestamps = 2; // per bucket timestamps
    repeated string   keyspaceIds        = 3;
}

// AddBucketsRequest will start vbucket-streams
// specified buckets and add them to the topic that
// has already started.
// Respond back with TopicResponse
message AddBucketsRequest {
    required string   topic         = 1;
    repeated TsVbuuid reqTimestamps = 2; // per bucket timestamps
    // list of instances applicable for buckets.
    repeated Instance    instances     = 3;
    optional FeedVersion version       = 4 [default=sherlock];
    optional uint64      opaque2       = 5;
    repeated string      keyspaceIds   = 6;
    optional bool        needsAuth     = 7;
}

// DelBucketsRequest will shutdown vbucket-streams
// for specified buckets and remove the buckets from topic.
// Respond back with TopicResponse
message DelBucketsRequest {
    required string   topic       = 1;
    repeated string   buckets     = 2;
    repeated string   keyspaceIds = 3;
}

// AddInstancesRequest to add index-instances to a topic.
// Respond back with TimestampResponse
message AddInstancesRequest {
    required string      topic      = 1;
    repeated Instance    instances  = 2; // instances to be added to this topic
    optional FeedVersion version    = 3 [default=sherlock];
    optional string      keyspaceId = 4;
    optional bool        needsAuth  = 5;
}

// DelInstancesRequest to delete index-instances from a topic.
// Respond back with TopicResponse
message DelInstancesRequest {
    required string topic       = 1;
    repeated uint64 instanceIds = 2; // instances to be deleted from this topic
    optional string keyspaceId  = 3;
}

// Requested by indexer / coordinator to inform router to re-connect with
// downstream endpoint. Error message will be sent as response.
message RepairEndpointsRequest {
    required string topic     = 1; // must be an already started topic.
    repeated string endpoints = 2;
    optional bool   needsAuth = 3;
}

// Requested by coordinator to should down a mutation topic and all KV
// connections active for that topic. Error message will be sent as response.
message ShutdownTopicRequest {
    required string topic = 1;
}

// Generic instance, can be an index instance, xdcr, search etc ...
message Instance {
    optional IndexInst indexInstance = 1;
}

// List of instances
message Instances {
    repeated Instance instances     = 1;
}
