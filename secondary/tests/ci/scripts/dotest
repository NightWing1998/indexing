#!/bin/bash

source ~/.cienv

echo '</pre><h3>Testing</h3><pre>'

if [ "$WORKSPACE" = "" ]; then
  echo 'WORKSPACE not set'
  exit 2
fi

if [ "$INSTALL_PATH" = "" ]; then
  INSTALL_PATH="$WORKSPACE/../couchbase"
fi


if [ "$MODE" = "" ]; then
  echo 'MODE not set'
  exit 2
fi

if [ "$STORAGE" = "" ]; then
  echo 'STORAGE not set'
  exit 2
fi

if [ "$TS" = "" ]; then
  TS="adhoc"
fi

stop_cluster() {
  killall -ABRT indexer 1>/dev/null 2>&1
  killall -ABRT projector 1>/dev/null 2>&1
  pkill -f cluster_
  pkill -f $WORKSPACE/install/bin
  pkill -f testrunner
  pkill -f /opt/couchbase
  pkill -f testrunner
  killall beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  sleep 10
  killall -9 beam.smp epmd memcached projector indexer gometa python memcached.json 1>/dev/null 2>&1
  cd $WORKSPACE/ns_server
  make dataclean 1>/dev/null 2>&1
  sudo rm -f /tmp/core*
  sleep 10
}

collect_logs() {
  if [ "$phase" = "" ]; then phase=unknown; fi
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar ns_server/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar testrunner/logs 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar test.log 1>/dev/null 2>&1
  tar -C $WORKSPACE --transform "s/^/logs-$phase-/" -uf $WORKSPACE/logs.tar run.log 1>/dev/null 2>&1
}

error_exit() {
  echo "</pre><h4>Testing Failed: $1</h4><pre>"
  echo "$2"
  collect_logs
  stop_cluster
  exit 2
}

# Setup workspace
echo "Using storage type: $STORAGE"

stop_cluster
rm -f $WORKSPACE/logs.tar.* $WORKSPACE/test.log $WORKSPACE/run.log /tmp/core-*
find ~/testdata/* -mtime +1 -exec rm {} \; 1>/dev/null 2>&1
warmed="never"
> $WORKSPACE/test.log

if [ "$MODE" = "test" ]; then
  # Test the base
  echo "</pre><h4>Simple Test</h4><pre>"
  export phase=sanity
  cd $WORKSPACE/testrunner
  (timeout 1h make simple-test 2>&1 | ts) | tee -a $WORKSPACE/test.log | egrep 'pass|fail|summary|ok$'
fi

# Core dumps
export GOTRACEBACK=crash
ulimit -c 2097152
sudo bash -c "echo /tmp/core-%e.$TS.%p > /proc/sys/kernel/core_pattern"
perl -pi -e 's/num_files, 10/num_files, 50/' /opt/couchbase/etc/couchbase/static_config

# Start server
echo "</pre><h4>Starting server</h4><pre>"

for a in {1..3}; do
  echo "Starting server: attempt $a"
  stop_cluster
  cd $WORKSPACE/ns_server
  ./cluster_run -n2 1>$WORKSPACE/run.log 2>&1 &
  disown
  for i in {1..120}; do
    grep -qs 'Couchbase Server has started' logs/n_0/info.log && \
      grep -qs 'Couchbase Server has started' logs/n_1/info.log && \
        wget -qO- http://localhost:9000/ &>/dev/null &&
          wget -qO- http://localhost:9001/ &>/dev/null &&
            ok_run=1 && break
    sleep 3
  done
  test "$ok_run" || continue
  sleep 30
  ./cluster_connect -n2 -s 1500 -I 1500 -T n0:kv,n1:kv+index >$WORKSPACE/run.log 2>&1 &
  for i in {1..120}; do
    grep -qs 'Bucket "default" marked as warmed' logs/n_0/info.log && \
      grep -qs 'Bucket "default" marked as warmed' logs/n_1/info.log && \
        ok_connect=1 && break
    sleep 3
  done
  test "$ok_connect" || continue
  break
done

test "$ok_run" || error_exit "Server startup failed even after 3 tries"
test "$ok_connect" || error_exit "Server connect failed even after 3 tries"
warmed="`date`"
sleep 30

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
gover="`grep -A20 'TARGET cbindex PACKAGE' CMakeLists.txt  | grep GOVERSION | head -1 | sed 's/^.*\([0-9]\.[0-9].[0-9]\).*$/\1/'`"

mkdir -p "$WORKSPACE/go" 
export GOROOT=$HOME/.cbdepscache/exploded/x86_64/go-$gover/go
export GOPATH=$WORKSPACE/go:$WORKSPACE/godeps:$WORKSPACE/goproj
export PATH=$PATH:$GOROOT/bin
export C_INCLUDE_PATH=$WORKSPACE/platform/include/:/opt/couchbase/include/:$WORKSPACE/forestdb/include:$WORKSPACE/build/tlm/deps/curl.exploded/include:$WORKSPACE/sigar/include
export CGO_LDFLAGS="-L $INSTALL_PATH/lib"
export LD_LIBRARY_PATH=$INSTALL_PATH/lib

cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests
go get -t ./... 1>/dev/null 2>&1

if [ "$MODE" = "test" ]; then
  # Unit tests
  echo "</pre><h4>Unit tests</h4><pre>"
  export phase=functional

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb/skiplist
  GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/memdb
  GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/indexer
  GOMAXPROCS=16 go test -timeout 4h -v 2>&1 | tee -a $WORKSPACE/test.log

  # Go tests
  export CBAUTH_REVRPC_URL="http://Administrator:asdasd@127.0.0.1:9000/query"
  echo "</pre><h4>Functional tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/functionaltests
  go test -timeout 4h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/largedatatests
  go test -timeout 8h -v -cbconfig ../config/buildtest_$STORAGE.json -useclient n1ql 2>&1 | tee -a $WORKSPACE/test.log
  collect_logs
  stop_cluster

  # Integration tests
  echo "</pre><h4>Integration tests</h4><pre>"
  export phase=integration
  cd $WORKSPACE/testrunner
  if [ "$STORAGE" = "memdb" ]; then
    export TYPE="memory_optimized"
  fi
  if [ "$STORAGE" = "plasma" ]; then
    export TYPE="plasma"
  fi
  if [ "$STORAGE" = "fdb" ]; then
    export TYPE="forestdb"
  fi
  (timeout 1h make test-2i-integrations-tests PARAMS=gsi_type=$TYPE 2>&1) | tee -a $WORKSPACE/test.log
  collect_logs
fi

if [ "$MODE" = "perf" ]; then
  echo "</pre><h4>Performance tests</h4><pre>"
  export phase=performance

  # Go tests
  export CBAUTH_REVRPC_URL="http://Administrator:asdasd@127.0.0.1:9000/query2"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tools/n1qlperf
  go build
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/cmd/cbindexperf
  go build
  cp $HOME/bin/config/* /opt/build/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests/
  echo "</pre><h4>Performance tests</h4><pre>"
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/perftests
  go test -timeout 4h -v -cbconfig ../config/buildtest_memdb.json -perftool cbindexperf -numdocs 2000000 2>&1 | tee -a $WORKSPACE/test.log
  collect_logs
  stop_cluster
fi

# Verify results
> /tmp/fail.log
if [ "$MODE" = "test" ]; then
  cd $WORKSPACE/goproj/src/github.com/couchbase/indexing/secondary/tests/ci/
  grep 'make:\s\*\*\*\s\[test-2i-integrations-tests\]\s' $WORKSPACE/test.log >> /tmp/fail.log
  grep '\sfail\s*$' $WORKSPACE/test.log >> /tmp/fail.log
  grep 'FAIL\s*github.com/couchbase' $WORKSPACE/test.log >> /tmp/fail.log
  grep -- '--- FAIL:' $WORKSPACE/test.log >> /tmp/fail.log
  grep '^\s*2i' $WORKSPACE/test.log | grep 'fail\s*$' >> /tmp/fail.log
  skiplist="`cat skip.txt`"
  for tst in $skiplist; do
    echo "$tst" | grep -qs '^\s*#' && continue
    echo "$tst" | grep -qs '^\s*$' && continue
    grep -v "$tst" /tmp/fail.log > /tmp/fail-out.log
    mv /tmp/fail-out.log /tmp/fail.log
  done
  faillog="`cat /tmp/fail.log`"
  if [ "$faillog" != "" ]; then error_exit "Required test failed" "$faillog"; fi
  echo "</pre><h4>Testing Succeeded</h4><pre>"
  if [ "$skiplist" != "" ]; then
    echo "But we ignored these tests:"
    echo "$skiplist"
  fi
  echo
fi

# Note versions
cd $WORKSPACE/goproj/src/github.com/couchbase/indexing
git rev-parse HEAD > ~/indexing.good
cd $WORKSPACE/goproj/src/github.com/couchbase/query
git rev-parse HEAD > ~/query.good
cd $WORKSPACE/goproj/src/github.com/couchbase/gometa
git rev-parse HEAD > ~/gometa.good
cd $WORKSPACE/ns_server
git rev-parse HEAD > ~/ns_server.good
cd $WORKSPACE/couchdb
git rev-parse HEAD > ~/couchdb.good
cd $WORKSPACE/couchstore
git rev-parse HEAD > ~/couchstore.good
if [ "$STORAGE" = "plasma" ]; then
  cd $WORKSPACE/goproj/src/github.com/couchbase/plasma
  git rev-parse HEAD > ~/plasma.good
fi
if [ "$STORAGE" = "memdb" ]; then
  cd $WORKSPACE/goproj/src/github.com/couchbase/nitro
  git rev-parse HEAD > ~/nitro.good
fi
if [ "$STORAGE" = "fdb" ]; then
  cd $WORKSPACE/forestdb
  git rev-parse HEAD > ~/forestdb.good
fi
cd $WORKSPACE/testrunner
git rev-parse HEAD > ~/testrunner.good
cd $WORKSPACE/kv_engine
git rev-parse HEAD > ~/kv_engine.good

exit 0

